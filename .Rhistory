#mData1%>%group_by(Province,Date)%>%summarise(sum = sum(Cases))
US_total_graph <- ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase))
US_total_graph + geom_jitter(width = .2)
US_total_graph + geom_col()
US_Data_state<-US_Data%>%group_by(Province,Date)%>% drop_na
#US_Data_state <-US_Data_state[!(is.na(US_Data_state$Province) | US_Data_state$Province==""), ]
#US_Data_state <- US_Data_state[!apply(is.na(US_Data_state) | US_Data_state == "", 1, all),]
US_Data_state <- US_Data_state%>%filter(Province!="")%>%filter(Cases!="")
US_Data_state
singleday_state<-US_Data_state%>%filter(Date =="2022-01-01T00:00:00Z")
singleday_state
US_Data_state_sum<-US_Data_state%>%summarise(total = sum(Cases))
US_Data_state_sum
singleday_state_total<-singleday_state%>%group_by(Province)%>%summarise(Total = sum(Cases))
singleday_state_total = singleday_state_total[-1,]
singleday_state_total
singleday_graph <- ggplot(data = singleday_state_total, aes(x = Province, y = Total))
singleday_graph + geom_jitter(width = .2)+theme(axis.text.x = element_text(angle = 90))
state_graph <- ggplot(data = US_Data_state_sum, aes(x = Province, y = total))
state_graph + geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
knitr::opts_chunk$set(echo = TRUE)
library(easypackages)
libraries("httr", "dplyr", "jsonlite", "ggplot2")
library(stringr)
library(RColorBrewer)
library(tidyr)
# Write a function to read in the data set from API
get_Data <- function(url){
myData<- GET(paste0("https://api.covid19api.com", url))
parsed <- fromJSON(rawToChar(myData$content))
return(parsed)
}
# Write a function to rename the countries
countries_Names <- function(countries){
ifelse(countries %in% c("Antigua and Barbuda", "Brunei Darussalam", "Iran, Islamic Republic of", "Micronesia, Federated States of", "Taiwan, Republic of China", "Tanzania, United Republic of", "Trinidad and Tobago"), new_countries <- str_replace(word(countries, 1), ",", ""),
ifelse(countries == "Congo (Brazzaville)",  new_countries <- "Republic of Congo",
ifelse(countries == "Congo (Kinshasa)",  new_countries <- "Democratic Republic of the Congo",
ifelse(countries == "Korea (North)", new_countries <- "North Korea",
ifelse(countries == "Lao PDR", new_countries <- "Laos",
ifelse(countries == "Macedonia, Republic of", new_countries <- "North Macedonia",
ifelse(countries == "Republic of Kosovo", new_countries <- "Kosovo",
ifelse(countries == "Saint Vincent and Grenadines", new_countries <- "Saint Vincent",
ifelse(countries == "Syrian Arab Republic (Syria)", new_countries <- "Syria",
ifelse(countries == "United Kingdom", new_countries <- "UK",
ifelse(countries == "United States of America", new_countries <- "USA",
ifelse(countries == "Viet Nam", new_countries <-"Vietnam",
ifelse(countries == "Saint Kitts and Nevis", new_countries <- "Saint Kitts",
ifelse(countries == "Korea (South)", new_countries <- "South Korea",
ifelse(countries == "Russian Federation", new_countries <- "Russia",
new_countries <- countries)))))))))))))))
}
covid_summary <- get_Data("/summary")$Countries %>% as_tibble()
covid_summary$new_Countries <- countries_Names(covid_summary$Country)
covid_summary
#head(covid_summary)
# Read in the world map
mapdata <- map_data("world")
mapData <- left_join(mapdata, covid_summary, by = c("region" = "new_Countries"))
mapdata1 <- mapData %>% filter(!is.na(mapData$TotalConfirmed))
ggplot(mapdata1, aes(x= long, y =lat, group = group)) +
geom_polygon(aes(fill = TotalConfirmed), color = "darkgreen") +
scale_fill_gradient(name = "Cases", low='#EEEEEE', high='darkgreen', na.value = "grey") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank()) +
labs(title = "Coronavirus Worldwide")
# labels <- covid_summary %>% arrange(desc(TotalConfirmed)) %>% select(new_Countries) %>% slice(1:10)
#covid_summary2 <- get_Data("/summary")$Countries
ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths)) + geom_point()
get_Data("/country/united-states/status/confirmed?from=2020-03-01T00:00:00Z&to=2020-03-07T00:00:00Z")
get_Data("/country/united-states/status/confirmed?from=2022-01-01T00:00:00Z&to=2022-01-07T00:00:00Z")
seq(as.Date("2000/1/1"), by = "month", length.out = 12)
seq(as.Date("2000/1/1"), by = "week", length.out = 12)
get_Date <- function(start, end){
diff <- as.numeric(difftime(as.Date(end),as.Date(start)))
start_date <- seq(as.Date(start), by = "week", length.out = diff %/% 7 +1)
end_date <- c(seq(as.Date(start)+6, by = "week", length.out = diff %/% 7), end)
return(list(start_date, end_date))
}
Week_list<-get_Date("2022-01-01", "2022-05-31")
Week_list
Week_list[[1]][[1]]
as.numeric(difftime(as.Date("2022-05-31"),as.Date("2022-01-01"))) %/% 7
as.numeric(difftime(as.Date("2022-05-31"),as.Date("2022-01-01"))) %% 7
get_confirmed_data <- function(start, end, country){
Week_list<-get_Date(start, end)
web_url_1<-paste0("/country/","united-states","/status/confirmed?")
country_data_total = data.frame()
for(i in 1:length(Week_list[[1]])){
web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[i]],"T00:00:00Z","&to=",Week_list[[2]][[i]],"T00:00:00Z")
country_data <-get_Data(web_url_2)
country_data_total<-rbind(country_data_total,country_data)
}
##web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[1]],"T00:00:00Z","&to=",Week_list[[2]][[1]],"T00:00:00Z")
##country_data <-get_Data(web_url_2)
return (country_data_total)
}
US_Data <-get_confirmed_data("2022-01-01","2022-06-01","united-states")
US_Data_Total<-US_Data%>%group_by(Date)%>%summarise(sum = sum(Cases))
US_Data_Total
US_Data_Total$sum<- US_Data_Total$sum - lag(US_Data_Total$sum,default = first(US_Data_Total$sum))
US_Data_Total<-US_Data_Total%>%rename(DailyCase = sum)
US_Data_Total
#mData1%>%group_by(Province,Date)%>%summarise(sum = sum(Cases))
US_total_graph <- ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase))
US_total_graph + geom_jitter(width = .2)
US_total_graph + geom_col()
US_Data_state<-US_Data%>%group_by(Province,Date)%>% drop_na
#US_Data_state <-US_Data_state[!(is.na(US_Data_state$Province) | US_Data_state$Province==""), ]
#US_Data_state <- US_Data_state[!apply(is.na(US_Data_state) | US_Data_state == "", 1, all),]
US_Data_state <- US_Data_state%>%filter(Province!="")%>%filter(Cases!="")
US_Data_state
singleday_state<-US_Data_state%>%filter(Date =="2022-01-01T00:00:00Z")
singleday_state
US_Data_state_sum<-US_Data_state%>%summarise(total = sum(Cases))
US_Data_state_sum
singleday_state_total<-singleday_state%>%group_by(Province)%>%summarise(Total = sum(Cases))
singleday_state_total = singleday_state_total[-1,]
singleday_state_total
singleday_graph <- ggplot(data = singleday_state_total, aes(x = Province, y = Total))
singleday_graph + geom_jitter(width = .2)+theme(axis.text.x = element_text(angle = 90))
state_graph <- ggplot(data = US_Data_state_sum, aes(x = Province, y = total))
state_graph + geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths)) + geom_point()
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths)) + geom_point()
confirm_vs_death
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,colours= Country)) + geom_point()
confirm_vs_death
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,colour= Country)) + geom_point()
confirm_vs_death
confirm_vs_death
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths)) + geom_point()
confirm_vs_death
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,size=NewDeaths)) + geom_point()
confirm_vs_death
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
knitr::opts_chunk$set(echo = TRUE)
library(easypackages)
libraries("httr", "dplyr", "jsonlite", "ggplot2")
library(stringr)
library(RColorBrewer)
library(tidyr)
# Write a function to read in the data set from API
get_Data <- function(url){
myData<- GET(paste0("https://api.covid19api.com", url))
parsed <- fromJSON(rawToChar(myData$content))
return(parsed)
}
# Write a function to rename the countries
countries_Names <- function(countries){
ifelse(countries %in% c("Antigua and Barbuda", "Brunei Darussalam", "Iran, Islamic Republic of", "Micronesia, Federated States of", "Taiwan, Republic of China", "Tanzania, United Republic of", "Trinidad and Tobago"), new_countries <- str_replace(word(countries, 1), ",", ""),
ifelse(countries == "Congo (Brazzaville)",  new_countries <- "Republic of Congo",
ifelse(countries == "Congo (Kinshasa)",  new_countries <- "Democratic Republic of the Congo",
ifelse(countries == "Korea (North)", new_countries <- "North Korea",
ifelse(countries == "Lao PDR", new_countries <- "Laos",
ifelse(countries == "Macedonia, Republic of", new_countries <- "North Macedonia",
ifelse(countries == "Republic of Kosovo", new_countries <- "Kosovo",
ifelse(countries == "Saint Vincent and Grenadines", new_countries <- "Saint Vincent",
ifelse(countries == "Syrian Arab Republic (Syria)", new_countries <- "Syria",
ifelse(countries == "United Kingdom", new_countries <- "UK",
ifelse(countries == "United States of America", new_countries <- "USA",
ifelse(countries == "Viet Nam", new_countries <-"Vietnam",
ifelse(countries == "Saint Kitts and Nevis", new_countries <- "Saint Kitts",
ifelse(countries == "Korea (South)", new_countries <- "South Korea",
ifelse(countries == "Russian Federation", new_countries <- "Russia",
new_countries <- countries)))))))))))))))
}
covid_summary <- get_Data("/summary")$Countries %>% as_tibble()
covid_summary$new_Countries <- countries_Names(covid_summary$Country)
covid_summary
#head(covid_summary)
# Read in the world map
mapdata <- map_data("world")
mapData <- left_join(mapdata, covid_summary, by = c("region" = "new_Countries"))
mapdata1 <- mapData %>% filter(!is.na(mapData$TotalConfirmed))
ggplot(mapdata1, aes(x= long, y =lat, group = group)) +
geom_polygon(aes(fill = TotalConfirmed), color = "darkgreen") +
scale_fill_gradient(name = "Cases", low='#EEEEEE', high='darkgreen', na.value = "grey") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank()) +
labs(title = "Coronavirus Worldwide")
# labels <- covid_summary %>% arrange(desc(TotalConfirmed)) %>% select(new_Countries) %>% slice(1:10)
#covid_summary2 <- get_Data("/summary")$Countries
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,size=NewDeaths)) + geom_point()
confirm_vs_death
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
get_Data("/country/united-states/status/confirmed?from=2020-03-01T00:00:00Z&to=2020-03-07T00:00:00Z")
get_Data("/country/united-states/status/confirmed?from=2022-01-01T00:00:00Z&to=2022-01-07T00:00:00Z")
seq(as.Date("2000/1/1"), by = "month", length.out = 12)
seq(as.Date("2000/1/1"), by = "week", length.out = 12)
get_Date <- function(start, end){
diff <- as.numeric(difftime(as.Date(end),as.Date(start)))
start_date <- seq(as.Date(start), by = "week", length.out = diff %/% 7 +1)
end_date <- c(seq(as.Date(start)+6, by = "week", length.out = diff %/% 7), end)
return(list(start_date, end_date))
}
Week_list<-get_Date("2022-01-01", "2022-05-31")
Week_list
Week_list[[1]][[1]]
as.numeric(difftime(as.Date("2022-05-31"),as.Date("2022-01-01"))) %/% 7
as.numeric(difftime(as.Date("2022-05-31"),as.Date("2022-01-01"))) %% 7
get_confirmed_data <- function(start, end, country){
Week_list<-get_Date(start, end)
web_url_1<-paste0("/country/","united-states","/status/confirmed?")
country_data_total = data.frame()
for(i in 1:length(Week_list[[1]])){
web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[i]],"T00:00:00Z","&to=",Week_list[[2]][[i]],"T00:00:00Z")
country_data <-get_Data(web_url_2)
country_data_total<-rbind(country_data_total,country_data)
}
##web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[1]],"T00:00:00Z","&to=",Week_list[[2]][[1]],"T00:00:00Z")
##country_data <-get_Data(web_url_2)
return (country_data_total)
}
US_Data <-get_confirmed_data("2022-01-01","2022-06-01","united-states")
US_Data_Total<-US_Data%>%group_by(Date)%>%summarise(sum = sum(Cases))
US_Data_Total
US_Data_Total$sum<- US_Data_Total$sum - lag(US_Data_Total$sum,default = first(US_Data_Total$sum))
US_Data_Total<-US_Data_Total%>%rename(DailyCase = sum)
US_Data_Total
#mData1%>%group_by(Province,Date)%>%summarise(sum = sum(Cases))
US_total_graph <- ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase))
US_total_graph + geom_jitter(width = .2)
#mData1%>%group_by(Province,Date)%>%summarise(sum = sum(Cases))
US_total_graph <- ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase))
US_total_graph + geom_jitter(width = .2)
US_total_graph + geom_col()
US_Data_state<-US_Data%>%group_by(Province,Date)%>% drop_na
#US_Data_state <-US_Data_state[!(is.na(US_Data_state$Province) | US_Data_state$Province==""), ]
#US_Data_state <- US_Data_state[!apply(is.na(US_Data_state) | US_Data_state == "", 1, all),]
US_Data_state <- US_Data_state%>%filter(Province!="")%>%filter(Cases!="")
US_Data_state
singleday_state<-US_Data_state%>%filter(Date =="2022-01-01T00:00:00Z")
singleday_state
US_Data_state_sum<-US_Data_state%>%summarise(total = sum(Cases))
US_Data_state_sum
singleday_state_total<-singleday_state%>%group_by(Province)%>%summarise(Total = sum(Cases))
singleday_state_total = singleday_state_total[-1,]
singleday_state_total
singleday_graph <- ggplot(data = singleday_state_total, aes(x = Province, y = Total))
singleday_graph + geom_jitter(width = .2)+theme(axis.text.x = element_text(angle = 90))
state_graph <- ggplot(data = US_Data_state_sum, aes(x = Province, y = total))
state_graph + geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 10000)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 5000)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 500)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 5000)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 10000)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 10000)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 20000)
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 20000)+ggtitle("US Daily Cases from Jan to June in 2022")
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 20000)+ggtitle("US Daily Cases from Jan to June in 2022")+
theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) + + geom_col()
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) +  geom_col()
state_graph <- ggplot(data = US_Data_state_sum, aes(x = Province, y = total)) +
geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
state_graph <- ggplot(data = US_Data_state_sum, aes(x = Province, y = total)) +
geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
```{r}
ggplot(data = US_Data_state_sum, aes(x = Province, y = total)) +
geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
knitr::opts_chunk$set(echo = TRUE)
library(easypackages)
libraries("httr", "dplyr", "jsonlite", "ggplot2")
library(stringr)
library(RColorBrewer)
library(tidyr)
# Write a function to read in the data set from API
get_Data <- function(url){
myData<- GET(paste0("https://api.covid19api.com", url))
parsed <- fromJSON(rawToChar(myData$content))
return(parsed)
}
# Write a function to rename the countries
countries_Names <- function(countries){
ifelse(countries %in% c("Antigua and Barbuda", "Brunei Darussalam", "Iran, Islamic Republic of", "Micronesia, Federated States of", "Taiwan, Republic of China", "Tanzania, United Republic of", "Trinidad and Tobago"), new_countries <- str_replace(word(countries, 1), ",", ""),
ifelse(countries == "Congo (Brazzaville)",  new_countries <- "Republic of Congo",
ifelse(countries == "Congo (Kinshasa)",  new_countries <- "Democratic Republic of the Congo",
ifelse(countries == "Korea (North)", new_countries <- "North Korea",
ifelse(countries == "Lao PDR", new_countries <- "Laos",
ifelse(countries == "Macedonia, Republic of", new_countries <- "North Macedonia",
ifelse(countries == "Republic of Kosovo", new_countries <- "Kosovo",
ifelse(countries == "Saint Vincent and Grenadines", new_countries <- "Saint Vincent",
ifelse(countries == "Syrian Arab Republic (Syria)", new_countries <- "Syria",
ifelse(countries == "United Kingdom", new_countries <- "UK",
ifelse(countries == "United States of America", new_countries <- "USA",
ifelse(countries == "Viet Nam", new_countries <-"Vietnam",
ifelse(countries == "Saint Kitts and Nevis", new_countries <- "Saint Kitts",
ifelse(countries == "Korea (South)", new_countries <- "South Korea",
ifelse(countries == "Russian Federation", new_countries <- "Russia",
new_countries <- countries)))))))))))))))
}
# Write a function to create a week list based on start date and end date.
get_Date <- function(start, end){
diff <- as.numeric(difftime(as.Date(end),as.Date(start)))
start_date <- seq(as.Date(start), by = "week", length.out = diff %/% 7 +1)
end_date <- c(seq(as.Date(start)+6, by = "week", length.out = diff %/% 7), end)
return(list(start_date, end_date))
}
# Write a function to get the confirmed cases based on start date and end date of any country.
get_confirmed_data <- function(start, end, country){
Week_list<-get_Date(start, end)
web_url_1<-paste0("/country/","united-states","/status/confirmed?")
country_data_total = data.frame()
for(i in 1:length(Week_list[[1]])){
web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[i]],"T00:00:00Z","&to=",Week_list[[2]][[i]],"T00:00:00Z")
country_data <-get_Data(web_url_2)
country_data_total<-rbind(country_data_total,country_data)
}
##web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[1]],"T00:00:00Z","&to=",Week_list[[2]][[1]],"T00:00:00Z")
##country_data <-get_Data(web_url_2)
return (country_data_total)
}
covid_summary <- get_Data("/summary")$Countries %>% as_tibble()
covid_summary$new_Countries <- countries_Names(covid_summary$Country)
covid_summary
#head(covid_summary)
# Read in the world map
mapdata <- map_data("world")
mapData <- left_join(mapdata, covid_summary, by = c("region" = "new_Countries"))
mapdata1 <- mapData %>% filter(!is.na(mapData$TotalConfirmed))
ggplot(mapdata1, aes(x= long, y =lat, group = group)) +
geom_polygon(aes(fill = TotalConfirmed), color = "darkgreen") +
scale_fill_gradient(name = "Cases", low='#EEEEEE', high='darkgreen', na.value = "grey") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank()) +
labs(title = "Coronavirus Worldwide")
# labels <- covid_summary %>% arrange(desc(TotalConfirmed)) %>% select(new_Countries) %>% slice(1:10)
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,size=NewDeaths)) + geom_point()
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
# This is test code
# create a week list with the function get_Date()
Week_list<-get_Date("2022-01-01", "2022-05-31")
Week_list
Week_list[[1]][[1]]
as.numeric(difftime(as.Date("2022-05-31"),as.Date("2022-01-01"))) %/% 7
as.numeric(difftime(as.Date("2022-05-31"),as.Date("2022-01-01"))) %% 7
US_Data <-get_confirmed_data("2022-01-01","2022-06-01","united-states")
US_Data_Total<-US_Data%>%group_by(Date)%>%summarise(sum = sum(Cases))
US_Data_Total
US_Data_Total$sum<- US_Data_Total$sum - lag(US_Data_Total$sum,default = first(US_Data_Total$sum))
US_Data_Total<-US_Data_Total%>%rename(DailyCase = sum)
US_Data_Total
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 20000)+ggtitle("US Daily Cases from Jan to Jun in 2022")+
theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) +  geom_col()
US_Data_state<-US_Data%>%group_by(Province,Date)%>% drop_na
#US_Data_state <-US_Data_state[!(is.na(US_Data_state$Province) | US_Data_state$Province==""), ]
#US_Data_state <- US_Data_state[!apply(is.na(US_Data_state) | US_Data_state == "", 1, all),]
US_Data_state <- US_Data_state%>%filter(Province!="")%>%filter(Cases!="")
US_Data_state
singleday_state<-US_Data_state%>%filter(Date =="2022-01-01T00:00:00Z")
singleday_state
US_Data_state_sum<-US_Data_state%>%summarise(total = sum(Cases))
US_Data_state_sum
singleday_state_total<-singleday_state%>%group_by(Province)%>%summarise(Total = sum(Cases))
singleday_state_total = singleday_state_total[-1,]
singleday_state_total
singleday_graph <- ggplot(data = singleday_state_total, aes(x = Province, y = Total))
singleday_graph + geom_jitter(width = .2)+theme(axis.text.x = element_text(angle = 90))
ggplot(data = US_Data_state_sum, aes(x = Province, y = total)) +
geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,size=NewDeaths)) + geom_point()
+ scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,size=NewDeaths)) + geom_point()
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
singleday_state_total<-singleday_state%>%group_by(Province)%>%summarise(Total = sum(Cases))
singleday_state_total = singleday_state_total[-1,]
singleday_state_total
ggplot(data = singleday_state_total, aes(x = Province, y = Total)) +
geom_jitter(width = .2)+theme(axis.text.x = element_text(angle = 90))
knitr::opts_chunk$set(echo = TRUE)
library(easypackages)
libraries("httr", "dplyr", "jsonlite", "ggplot2")
library(stringr)
library(RColorBrewer)
library(tidyr)
# Write a function to read in the data set from API
get_Data <- function(url){
myData<- GET(paste0("https://api.covid19api.com", url))
parsed <- fromJSON(rawToChar(myData$content))
return(parsed)
}
# Write a function to rename the countries
countries_Names <- function(countries){
ifelse(countries %in% c("Antigua and Barbuda", "Brunei Darussalam", "Iran, Islamic Republic of", "Micronesia, Federated States of", "Taiwan, Republic of China", "Tanzania, United Republic of", "Trinidad and Tobago"), new_countries <- str_replace(word(countries, 1), ",", ""),
ifelse(countries == "Congo (Brazzaville)",  new_countries <- "Republic of Congo",
ifelse(countries == "Congo (Kinshasa)",  new_countries <- "Democratic Republic of the Congo",
ifelse(countries == "Korea (North)", new_countries <- "North Korea",
ifelse(countries == "Lao PDR", new_countries <- "Laos",
ifelse(countries == "Macedonia, Republic of", new_countries <- "North Macedonia",
ifelse(countries == "Republic of Kosovo", new_countries <- "Kosovo",
ifelse(countries == "Saint Vincent and Grenadines", new_countries <- "Saint Vincent",
ifelse(countries == "Syrian Arab Republic (Syria)", new_countries <- "Syria",
ifelse(countries == "United Kingdom", new_countries <- "UK",
ifelse(countries == "United States of America", new_countries <- "USA",
ifelse(countries == "Viet Nam", new_countries <-"Vietnam",
ifelse(countries == "Saint Kitts and Nevis", new_countries <- "Saint Kitts",
ifelse(countries == "Korea (South)", new_countries <- "South Korea",
ifelse(countries == "Russian Federation", new_countries <- "Russia",
new_countries <- countries)))))))))))))))
}
# Write a function to create a week list based on start date and end date.
get_Date <- function(start, end){
diff <- as.numeric(difftime(as.Date(end),as.Date(start)))
start_date <- seq(as.Date(start), by = "week", length.out = diff %/% 7 +1)
end_date <- c(seq(as.Date(start)+6, by = "week", length.out = diff %/% 7), end)
return(list(start_date, end_date))
}
# Write a function to get the confirmed cases based on start date and end date of any country.
get_confirmed_data <- function(start, end, country){
Week_list<-get_Date(start, end)
web_url_1<-paste0("/country/","united-states","/status/confirmed?")
country_data_total = data.frame()
for(i in 1:length(Week_list[[1]])){
web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[i]],"T00:00:00Z","&to=",Week_list[[2]][[i]],"T00:00:00Z")
country_data <-get_Data(web_url_2)
country_data_total<-rbind(country_data_total,country_data)
}
##web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[1]],"T00:00:00Z","&to=",Week_list[[2]][[1]],"T00:00:00Z")
##country_data <-get_Data(web_url_2)
return (country_data_total)
}
covid_summary <- get_Data("/summary")$Countries %>% as_tibble()
covid_summary$new_Countries <- countries_Names(covid_summary$Country)
#covid_summary
head(covid_summary)
US_Data <-get_confirmed_data("2022-01-01","2022-06-01","united-states")
US_Data_Total<-US_Data%>%group_by(Date)%>%summarise(sum = sum(Cases))
US_Data_Total
# Calculate the daily cases by subtracting the total case number of the first day.
US_Data_Total$sum<- US_Data_Total$sum - lag(US_Data_Total$sum,default = first(US_Data_Total$sum))
# rename the column lable to DailyCase
US_Data_Total<-US_Data_Total%>%rename(DailyCase = sum)
US_Data_Total
# Read in the world map
mapdata <- map_data("world")
mapData <- left_join(mapdata, covid_summary, by = c("region" = "new_Countries"))
mapdata1 <- mapData %>% filter(!is.na(mapData$TotalConfirmed))
ggplot(mapdata1, aes(x= long, y =lat, group = group)) +
geom_polygon(aes(fill = TotalConfirmed), color = "darkgreen") +
scale_fill_gradient(name = "Cases", low='#EEEEEE', high='darkgreen', na.value = "grey") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank()) +
labs(title = "Coronavirus Worldwide")
# labels <- covid_summary %>% arrange(desc(TotalConfirmed)) %>% select(new_Countries) %>% slice(1:10)
confirm_vs_death <-ggplot(covid_summary, aes(TotalConfirmed,TotalDeaths,size=NewDeaths)) + geom_point()
confirm_vs_death + scale_x_continuous(trans='log2') +   scale_y_continuous(trans='log2')
ggplot(data = US_Data_Total, aes(DailyCase))+geom_histogram(binwidth = 20000)+ggtitle("US Daily Cases from Jan to Jun in 2022")+
theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) +  geom_col()
US_Data_state<-US_Data%>%group_by(Province,Date)%>% drop_na
#US_Data_state <-US_Data_state[!(is.na(US_Data_state$Province) | US_Data_state$Province==""), ]
#US_Data_state <- US_Data_state[!apply(is.na(US_Data_state) | US_Data_state == "", 1, all),]
US_Data_state <- US_Data_state%>%filter(Province!="")%>%filter(Cases!="")
US_Data_state
singleday_state<-US_Data_state%>%filter(Date =="2022-01-01T00:00:00Z")
singleday_state
US_Data_state_sum<-US_Data_state%>%summarise(total = sum(Cases))
US_Data_state_sum
singleday_state_total<-singleday_state%>%group_by(Province)%>%summarise(Total = sum(Cases))
singleday_state_total = singleday_state_total[-1,]
singleday_state_total
ggplot(data = singleday_state_total, aes(x = Province, y = Total)) +
geom_jitter(width = .2)+theme(axis.text.x = element_text(angle = 90))
ggplot(data = US_Data_state_sum, aes(x = Province, y = total)) +
geom_boxplot(fill = "grey")+theme(axis.text.x = element_text(angle = 90))
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) +  geom_col()
+theme(axis.text.x = element_text(angle = 90))
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) +  geom_col()
+theme(axis.text.x = element_text(angle = 90))
ggplot(data = US_Data_Total, aes(x = Date, y = DailyCase)) + geom_jitter(width = .2) +  geom_col() +
theme(axis.text.x = element_text(angle = 90))
