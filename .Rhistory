}
countries_Names_pop <- function(countries){
ifelse(countries == "Antigua And Barbuda", new_Countries <- "Antigua and Barbuda",
ifelse(countries == "Bosnia And Herzegovina", new_Countries <- "Bosnia and Herzegovina",
ifelse(countries == "Czechia", new_Countries <- "Czech Republic",
ifelse(countries == "Democratic Republic Of The Congo", new_Countries <- "Congo (Kinshasa)",
ifelse(countries == "Congo", new_Countries <- "Congo (Brazzaville)",
ifelse(countries == "Guinea Bissau", new_Countries <- "Guinea-Bissau",
ifelse(countries == "Holy See", new_Countries <- "Holy See (Vatican City State)",
ifelse(countries == "Iran", new_Countries <- "Iran, Islamic Republic of",
ifelse(countries == "South Korea", new_Countries <- "Korea (South)",
ifelse(countries == "Laos", new_Countries <- "Lao PDR",
ifelse(countries == "North Macedonia", new_Countries <- "Macedonia, Republic of",
ifelse(countries == "Micronesia (Federated States Of)", new_Countries <- "Micronesia, Federated States of",
ifelse(countries == "Palestine", new_Countries <- "Palestinian Territory",
ifelse(countries == "Kosovo", new_Countries <- "Republic of Kosovo",
ifelse(countries == "Russia", new_Countries <- "Russian Federation",
ifelse(countries == "Saint Kitts And Nevis", new_Countries <- "Saint Kitts and Nevis",
ifelse(countries == "Sao Tome And Principe", new_Countries <- "Sao Tome and Principe",
ifelse(countries == "Syria", new_Countries <- "Syrian Arab Republic (Syria)",
ifelse(countries == "Taiwan", new_Countries <- "Taiwan, Republic of China",
ifelse(countries == "United Republic Of Tanzania", new_Countries <- "Tanzania, United Republic of",
ifelse(countries == "Timor Leste", new_Countries <- "Timor-Leste",
ifelse(countries == "Trinidad And Tobago", new_Countries <- "Trinidad and Tobago",
ifelse(countries == "United States Of America", new_Countries <- "United States of America",
ifelse(countries == "Venezuela", new_Countries <- "Venezuela (Bolivarian Republic)",
ifelse(countries == "Vietnam", new_Countries <- "Viet Nam", new_countries <- countries)))))))))))))))))))))))))
}
get_Date <- function(start, end){
diff <- as.numeric(difftime(as.Date(end),as.Date(start)))
start_date <- seq(as.Date(start), by = "week", length.out = diff %/% 7 +1)
end_date <- c(seq(as.Date(start)+6, by = "week", length.out = diff %/% 7), end)
return(list(start_date, end_date))
}
get_confirmed_data <- function(start, end, country){
Week_list<-get_Date(start, end)
web_url_1<-paste0("/country/","united-states","/status/confirmed?")
country_data_total = data.frame()
for(i in 1:length(Week_list[[1]])){
web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[i]],"T00:00:00Z","&to=",Week_list[[2]][[i]],"T00:00:00Z")
country_data <-get_Data(web_url_2)
country_data_total<-rbind(country_data_total,country_data)
}
return (country_data_total)
}
get_all_data <- function(start, end, country){
Week_list<-get_Date(start, end)
web_url_1<-paste0("/country/","united-states","?")
country_data_total = data.frame()
for(i in 1:length(Week_list[[1]])){
web_url_2<-paste0(web_url_1,"from=",Week_list[[1]][[i]],"T00:00:00Z","&to=",Week_list[[2]][[i]],"T00:00:00Z")
country_data <-get_Data(web_url_2)
country_data_total<-rbind(country_data_total,country_data)
}
return (country_data_total)
}
# Read in the data set
covid_summary <- get_Data("/summary")$Countries %>% as_tibble()
# Using the countries_Names function to create a new variable called new_Countries to match the country names in the map data set
covid_summary$new_Countries <- countries_Names(covid_summary$Country)
# Read in the world map
mapdata <- map_data("world")
# Combine the map and covid_summary data sets
mapData <- left_join(mapdata, covid_summary, by = c("region" = "new_Countries"))
# Remove the rows which do not contain total confirmed cases numbers
mapdata1 <- mapData %>% filter(!is.na(mapData$TotalConfirmed))
# Read in the data set
pop <- distinct(read_csv("data.csv")[1:4])
# Using the countries_Names_pop function to create a new variable Country to match the country names in the covid_summary data set.
pop$Country <- countries_Names_pop(pop$country)
pop <- pop[3:5]
# Combine the covid_summary and population data sets
covid_summary_pop <- left_join(covid_summary, pop, by = "Country")
# Create a new variable which represents the proportion of population who contrasted the corona virus
covid_summary_hist <- covid_summary_pop %>%
mutate(ConfirmedProportion = TotalConfirmed/population) %>%
select(Country, ConfirmedProportion) %>%
drop_na(ConfirmedProportion)
# Read in the data set
US_Data <- get_confirmed_data("2022-01-01","2022-05-31","united-states")
# Check the data quality
summary(US_Data$Cases)
# Remove the rows which had cases less than 0, and create a new variable call NewCases
US_NewCase <- US_Data %>%
filter(Cases >= 0) %>%
group_by(Province, City) %>%
select(Cases, Date) %>%
mutate(NewCases = Cases - lag(Cases, default = first(Cases))) %>%
filter(Province != "" & NewCases >= 0)
# Create a tibble to summary the total new cases by state
US_NewCase_StateSum <- US_NewCase %>%
group_by(Province) %>%
summarise(TotalNewCases = sum(NewCases))
state_names <- pull(US_NewCase_StateSum %>% arrange(desc(TotalNewCases)) %>% top_n(10) %>% select(Province))
# Create a tibble to the new case information in the top 10 states
US_NewCase_byState <- US_NewCase %>% group_by(Province, Date) %>% summarise(Sum = sum(NewCases)) %>% filter(Province %in% state_names)
# Read in the data set
US_all <- get_all_data("2022-01-01","2022-05-31","united-states")
# Check the data quality
apply(X= select(US_all, Confirmed: Active), MARGIN = 2, FUN = summary)
# Create three new variables: NewConfirmed, NewDeaths, NewActive.
US_all_new <- US_all %>% filter(Confirmed >= 0 & Deaths >= 0) %>%
group_by(Province, City) %>%
select(Date, Confirmed, Deaths, Active) %>%
mutate(NewConfirmed = Confirmed - lag(Confirmed, default = first(Confirmed)),
NewDeaths = Deaths - lag(Deaths, default = first(Deaths)),
NewActive = Active - lag(Active, default = first(Active)))
ggplot(mapdata1, aes(x= long, y =lat, group = group)) +
geom_polygon(aes(fill = TotalConfirmed), color = "darkgreen") +
scale_fill_gradient(name = "Cases", low='#EEEEEE', high='darkgreen', na.value = "grey") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y=element_blank(),
axis.title.x=element_blank(),
rect = element_blank()) +
labs(title = "Coronavirus Worldwide")
# labels <- covid_summary %>% arrange(desc(TotalConfirmed)) %>% select(new_Countries) %>% slice(1:10)
case_tab <- covid_summary_pop %>%
select(c("Country", "continent", "NewConfirmed", "TotalConfirmed", "NewDeaths", "TotalDeaths", "population"))  %>%
arrange(desc(TotalConfirmed)) %>%
rename(Continent = continent, Population = population)
datatable(case_tab)
case_summary_tab <- covid_summary_pop %>%
drop_na(continent) %>%
group_by(continent) %>%
summarise(ContinentTotalConfirmed = sum(TotalConfirmed), ContinentTotalDeaths =sum(TotalDeaths)) %>%
arrange(desc(ContinentTotalConfirmed))
row_names <- case_summary_tab$continent
case_summary_tab <- rbind(case_summary_tab[2:3],colSums(case_summary_tab[2:3]))
case_summary_tab <- as.data.frame(case_summary_tab)
rownames(case_summary_tab) <- c(row_names, "Total")
datatable(case_summary_tab)
#  Create numerical summaries for total confirmed cases and deaths in different consents
tapply(X= c(covid_summary_pop$TotalConfirmed), INDEX = covid_summary_pop$continent, FUN = summary)
#  Create numerical summaries for total deaths in different consents
tapply(X= c(covid_summary_pop$TotalDeaths), INDEX = covid_summary_pop$continent, FUN = summary)
ggplot(covid_summary_hist, aes(x= ConfirmedProportion)) +
geom_histogram(binwidth = 0.02, fill="#69b3a2") +
labs(title = "Histogram Plot of the Proportion of Confirmed Cases")
confirm_vs_death <-ggplot(covid_summary_pop, aes(x = TotalConfirmed, y = TotalDeaths))
confirm_vs_death +
geom_point() +
scale_x_continuous(trans='log2') + scale_y_continuous(trans='log2') +
geom_text(aes(label = Country, color = factor(continent)), size = 3.5, check_overlap = TRUE, vjust = "inward", hjust = "inward") +
labs(title = "Scatter Plot of the relationship between total confirmed cases and total deaths by country", x= "log2(TotalDeaths)", y= "log2(TotalConfirmed)")
datatable(US_NewCase_StateSum %>% arrange(desc(TotalNewCases)))
ggplot(US_NewCase_byState, aes(x = Province, y = Sum)) +
geom_boxplot() +
coord_cartesian(ylim=c(0, 75000)) +
theme(axis.text.x = element_text(angle = 45)) +
labs(x= "Sates", y= "Daily New Cases", title = "Box Plot of Daily New Cases in the top 10 States")
CA_NewCases <- US_NewCase %>% filter(Province == "California" & NewCases >= 5000)
table(CA_NewCases$City)
ggplot(CA_NewCases, aes(x= City)) +
geom_bar(fill="#69b3a2") +
theme(axis.text.x = element_text(angle = 45)) +
labs(x= "California", y= "Days of Daily New Cases exceeded 5,000", title = "Bar Plot of Days of Daily New Cases exceeded 5,000 in California")
LA_all <- US_all_new %>% filter(Province == "California" & City == "Los Angeles") %>%
select(Date, NewConfirmed : NewActive) %>%
pivot_longer(cols = 4:6, names_to = "CaseType", values_to = "Cases")
LA_all$Date <- as.Date(substr(LA_all$Date, 1, 11))
ggplot(data = LA_all, aes(x = Date, y = Cases)) +
geom_col(aes(fill =CaseType))+
theme(axis.text.x = element_text(angle = 45, size = 8.5)) +
labs(title = "Daily New Cases in Los Angeles, CA")
rmarkdown::render("_Rmd/2022-06-30-Cool-Thing-R.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
rmarkdown::render("_Rmd/2022-06-30-Cool-Thing-R.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
rmarkdown::render("_Rmd/2022-06-30-Cool-Thing-R.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
rmarkdown::render("_Rmd/2022-07-10-Predictive-Models.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
rmarkdown::render("_Rmd/2022-07-10-Predictive-Models.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
rmarkdown::render("_Rmd/2022-07-10-Creating Predictive Models and Automating Markdown Reports", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
rmarkdown::render("_Rmd/2022-07-10-Creating-Predictive-Models-and-Automating-Markdown-Reports.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
#library(easypackages)
#libraries("httr", "tidyverse", "jsonlite", "DT", "stringr", "RColorBrewer")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
#library(easypackages)
#libraries("httr", "tidyverse", "jsonlite", "DT", "stringr", "RColorBrewer")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
biplot(sample_pca, xlabs = rep(".", nrow(countyData)), cex = 1.2)
biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
#library(easypackages)
#libraries("httr", "tidyverse", "jsonlite", "DT", "stringr", "RColorBrewer")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
sample_pca
biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
#biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
pc_eigenvalues <- sample_pca$sdev^2
# create a "tibble" manually with
# a variable indicating the PC number
# and a variable with the variances
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
```{r}
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
library(ggfortify)
install.packages("ggfortity")
library(ggfortify)
```{r}
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
#library(easypackages)
#libraries("httr", "tidyverse", "jsonlite", "DT", "stringr", "RColorBrewer")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
sample_pca
#biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
pc_eigenvalues <- sample_pca$sdev^2
# create a "tibble" manually with
# a variable indicating the PC number
# and a variable with the variances
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2)) +
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
#library(easypackages)
#libraries("httr", "tidyverse", "jsonlite", "DT", "stringr", "RColorBrewer")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
sample_pca
#biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
pc_eigenvalues <- sample_pca$sdev^2
# create a "tibble" manually with
# a variable indicating the PC number
# and a variable with the variances
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2))
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2))
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2))
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2))
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
#library(easypackages)
#libraries("httr", "tidyverse", "jsonlite", "DT", "stringr", "RColorBrewer")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
sample_pca
#biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
pc_eigenvalues <- sample_pca$sdev^2
# create a "tibble" manually with
# a variable indicating the PC number
# and a variable with the variances
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2))
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
sample_pca
#biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
pc_eigenvalues <- sample_pca$sdev^2
# create a "tibble" manually with
# a variable indicating the PC number
# and a variable with the variances
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
rmarkdown::render("_Rmd/2022-07-19-PCA.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
knitr::opts_chunk$set(echo = TRUE,fig.path = "../images/")
library(tidyverse)
# Read in the world map
trans_cts <- read_csv("./data/counts_transformed.csv")
# Create a matrix from our table of counts
pca_matrix <- trans_cts %>%
# make the "gene" column become the rownames of the table
column_to_rownames("gene") %>%
# coerce to a matrix
as.matrix() %>%
# transpose the matrix so that rows = samples and columns = variables
t()
# Perform the PCA
sample_pca <- prcomp(pca_matrix)
sample_pca
#biplot(sample_pca, xlabs = rep(".", nrow(trans_cts)), cex = 1.2)
pc_eigenvalues <- sample_pca$sdev^2
# create a "tibble" manually with
# a variable indicating the PC number
# and a variable with the variances
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
# print the result
pc_eigenvalues
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
# The PC scores are stored in the "x" value of the prcomp object
pc_scores <- sample_pca$x
pc_scores <- pc_scores %>%
# convert to a tibble retaining the sample names as a new column
as_tibble(rownames = "sample")
# print the result
pc_scores
pc_scores %>%
# create the plot
ggplot(aes(x = PC1, y = PC2)) +
geom_point()
rmarkdown::render("_Rmd/2022-07-19-PCA.Rmd", output_format = "github_document",
output_dir = "_posts/",output_options = list(html_preview = FALSE ))
